// –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏–º–∏ —Å–µ–π—Ñ–∞–º–∏ —É –±–æ–∫–æ–≤–æ–º—É –º–µ–Ω—é
class ExpiringSafesManager {
  constructor() {
    this.clients = [];
    this.expiringSafes = [];
    this.animationDelay = 100; // –º—Å –º—ñ–∂ –∞–Ω—ñ–º–∞—Ü—ñ—è–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  }

  // ========== –ê–ù–Ü–ú–ê–¶–Ü–ô–ù–Ü –ú–ï–¢–û–î–ò ==========
  
  animateItemEntry(element, delay = 0) {
    element.style.opacity = '0';
    element.style.transform = 'translateX(-20px)';
    
    setTimeout(() => {
      element.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
      element.style.opacity = '1';
      element.style.transform = 'translateX(0)';
    }, delay);
  }

  animateItemUpdate(element) {
    element.style.transform = 'scale(1.05)';
    element.style.background = 'rgba(74, 144, 226, 0.1)';
    
    setTimeout(() => {
      element.style.transform = 'scale(1)';
      element.style.background = '';
    }, 200);
  }

  showLoadingState() {
    const container = document.getElementById('expiring-safes-list');
    if (container) {
      container.innerHTML = '<div class="loading-placeholder" style="height: 30px; border-radius: 4px; margin: 4px 0;"></div>';
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ API
  async loadClients() {
    this.showLoadingState();
    
    try {
      const response = await fetch('/api/clients');
      if (response.ok) {
        this.clients = await response.json();
        this.findExpiringSafes();
        this.renderExpiringSafes();
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
      const container = document.getElementById('expiring-safes-list');
      if (container) {
        container.innerHTML = '<div style="color: #e74c3c; font-size: 0.9em; padding: 8px;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</div>';
      }
    }
  }

  // –ü–æ—à—É–∫ —Å–µ–π—Ñ—ñ–≤, —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è
  findExpiringSafes() {
    const today = new Date();
    const nextWeek = new Date(today);
    nextWeek.setDate(today.getDate() + 7);
    
    this.expiringSafes = [];

    this.clients.forEach(client => {
      if (client.safes && Array.isArray(client.safes)) {
        client.safes.forEach((safe, safeIndex) => {
          if (safe.endDate) {
            const endDate = new Date(safe.endDate);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–µ—Ä–º—ñ–Ω –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º
            if (endDate <= nextWeek) {
              const isExpired = endDate < today;
              const daysLeft = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
              
              this.expiringSafes.push({
                client: client,
                safe: safe,
                safeIndex: safeIndex,
                endDate: endDate,
                isExpired: isExpired,
                daysLeft: daysLeft
              });
            }
          }
        });
      }
    });

    // –°–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ, –ø–æ—Ç—ñ–º –∑–∞ –¥–∞—Ç–æ—é –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
    this.expiringSafes.sort((a, b) => {
      if (a.isExpired && !b.isExpired) return -1;
      if (!a.isExpired && b.isExpired) return 1;
      return a.endDate - b.endDate;
    });
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫—É —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö —Å–µ–π—Ñ—ñ–≤
  renderExpiringSafes() {
    const container = document.getElementById('expiring-safes-list');
    const titleElement = document.querySelector('.expiring-title');
    if (!container) return;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º
    if (titleElement) {
      const expiredCount = this.expiringSafes.filter(item => item.isExpired).length;
      const soonCount = this.expiringSafes.filter(item => !item.isExpired).length;
      
      if (this.expiringSafes.length === 0) {
        titleElement.innerHTML = '‚úÖ –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ —Å–µ–π—Ñ–∏';
      } else {
        const badgeClass = expiredCount > 0 ? 'badge-danger' : 'badge-warning';
        titleElement.innerHTML = `‚ö†Ô∏è –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ —Å–µ–π—Ñ–∏ <span class="count-badge ${badgeClass}">${this.expiringSafes.length}</span>`;
      }
      
      // –ê–Ω—ñ–º–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
      this.animateItemUpdate(titleElement);
    }

    if (this.expiringSafes.length === 0) {
      container.innerHTML = '<div style="text-align:center;color:#666;font-size:0.75em;padding:8px;">–ù–µ–º–∞—î —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö —Å–µ–π—Ñ—ñ–≤</div>';
      return;
    }

    // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    this.expiringSafes.forEach((item, index) => {
      const statusClass = item.isExpired ? 'expired' : 'expiring-soon';
      const statusIcon = item.isExpired ? 'üî¥' : '‚ö†Ô∏è';
      const statusText = item.isExpired 
        ? '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ!' 
        : `${item.daysLeft} –¥–Ω.`;
      
      const element = document.createElement('a');
      element.href = `client.html?id=${encodeURIComponent(item.client.id)}`;
      element.className = `expiring-item ${statusClass}`;
      element.dataset.clientId = item.client.id;
      element.dataset.safeIndex = item.safeIndex;
      element.title = '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∞–Ω–∫–µ—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞';
      
      element.innerHTML = `
        <div class="expiring-item-name">${statusIcon} ${this.truncateName(item.client.name)}</div>
        <div class="expiring-item-safe">üîí –°–µ–π—Ñ ‚Ññ${item.safe.safeNumber || '-'}</div>
        <div class="expiring-item-date">üìÖ ${statusText}</div>
      `;
      
      container.appendChild(element);
      
      // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
      this.animateItemEntry(element, index * this.animationDelay);
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
    this.addClickHandlers();
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–ª—ñ–∫—ñ–≤
  addClickHandlers() {
    const items = document.querySelectorAll('.expiring-item');
    items.forEach(item => {
      item.addEventListener('click', (e) => {
        // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π feedback
        item.style.transform = 'scale(0.95)';
        setTimeout(() => {
          item.style.transform = '';
        }, 150);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π —Å–µ–π—Ñ –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤ –∞–Ω–∫–µ—Ç—ñ
        const clientId = item.dataset.clientId;
        const safeIndex = item.dataset.safeIndex;
        if (clientId && safeIndex !== undefined) {
          localStorage.setItem('highlightSafe', JSON.stringify({
            clientId: clientId,
            safeIndex: parseInt(safeIndex)
          }));
        }
      });

      // Hover –∑–≤—É–∫ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
      item.addEventListener('mouseenter', () => {
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–≤—É–∫–æ–≤–∏–π –µ—Ñ–µ–∫—Ç —Ç—É—Ç
      });
    });
  }

  // –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥–æ–≤–≥–∏—Ö —ñ–º–µ–Ω
  truncateName(name) {
    if (!name) return '-';
    if (name.length <= 25) return name;
    return name.substring(0, 22) + '...';
  }

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
  formatDate(date) {
    return date.toLocaleDateString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  init() {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    this.loadClients();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    setInterval(() => {
      this.loadClients();
    }, 5 * 60 * 1000);
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener('DOMContentLoaded', () => {
  const expiringSafesManager = new ExpiringSafesManager();
  expiringSafesManager.init();
  
  // –†–æ–±–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
  window.expiringSafesManager = expiringSafesManager;
});
